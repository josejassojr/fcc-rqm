{"version":3,"sources":["quotes.js","App.js","reportWebVitals.js","index.js"],"names":["QUOTES","author","quote","lenQuotes","length","QuoteBox","props","state","index","Math","floor","random","getNewQuote","bind","this","setState","className","id","onClick","navigator","clipboard","writeText","target","href","split","join","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAaA,EAAS,CACpB,CACEC,OAAQ,aACRC,MAAO,4FAET,CACED,OAAQ,kBACRC,MAAO,6CAET,CACED,OAAQ,kBACRC,MAAO,0DAET,CACED,OAAQ,oBACRC,MAAO,yDAET,CACED,OAAQ,oBACRC,MAAO,8CAET,CACED,OAAQ,oBACRC,MAAO,8EAET,CACED,OAAQ,YACRC,MAAO,yEAET,CACED,OAAQ,MACRC,MAAO,uB,OC5BLC,EAAYH,EAAOI,OA4DVC,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAOC,KAAKC,MAAMD,KAAKE,SAAWR,IAEpC,EAAKS,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,+CASnB,WACEC,KAAKC,SAAS,CACZP,MAAOC,KAAKC,MAAMD,KAAKE,SAAWR,O,oBAItC,WAAU,IAAD,OACP,OACE,sBAAKa,UAAU,WAAWC,GAAG,YAA7B,UACE,sBAAKA,GAAG,OAAR,UACE,mBAAGD,UAAU,sBADf,IACyChB,EAAOc,KAAKP,MAAMC,OAAON,SAElE,sBAAKe,GAAG,SAAR,cAAmBjB,EAAOc,KAAKP,MAAMC,OAAOP,UAC5C,wBACEgB,GAAG,aACHC,QAAS,kBACPC,UAAUC,UAAUC,UAClBrB,EAAO,EAAKO,MAAMC,OAAON,MACvB,KACAF,EAAO,EAAKO,MAAMC,OAAOP,SANjC,SAUE,mBAAGe,UAAU,uBAEf,wBAAQA,UAAU,MAAMC,GAAG,YAAYC,QAASJ,KAAKF,YAArD,uBAGA,wBAAQI,UAAU,MAAMC,GAAG,YAA3B,SACE,mBACEA,GAAG,cACHK,OAAO,SACPC,KACE,yCACAvB,EAAOc,KAAKP,MAAMC,OAAON,MAAMsB,MAAM,KAAKC,KAAK,OAC/C,KACAzB,EAAOc,KAAKP,MAAMC,OAAOP,OAAOuB,MAAM,KAAKC,KAAK,OAChD,gBARJ,SAWE,mBAAGT,UAAU,8B,GAlDFU,aCORC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.893f1ce5.chunk.js","sourcesContent":["export const QUOTES = [\n  {\n    author: \"Mark Twain\",\n    quote: \"The man who does not read good books has no advantage over the man who cannot read them.\"\n  },\n  {\n    author: \"Albert Einstein\",\n    quote: \"God does not play dice with the universe.\"\n  },\n  {\n    author: \"Edgar Allan Poe\",\n    quote: \"All that we see or seem is but a dream within a dream.\"\n  },\n  {\n    author: \"Douglas MacArthur\",\n    quote: \"Only those are fit to live who are not afraid to die.\"\n  },\n  {\n    author: \"Winston Churchill\",\n    quote: \"If you are going through hell, keep going.\"\n  },\n  {\n    author: \"Eleanor Roosevelt\",\n    quote: \"If life were predictable it would cease to be life, and be without flavor.\"\n  },\n  {\n    author: \"Aristotle\",\n    quote: \"It is during our darkest moments that we must focus to see the light.\"\n  },\n  {\n    author: \"Bee\",\n    quote: \"Lo que sera, sera.\"\n  }\n];\n\n","import { Component } from \"react\";\nimport { QUOTES } from \"./quotes\";\n\nconst lenQuotes = QUOTES.length;\n\nclass QuoteBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: Math.floor(Math.random() * lenQuotes)\n    };\n    this.getNewQuote = this.getNewQuote.bind(this);\n    // this.copyQuote = this.copyQuote.bind(this);\n  }\n\n  getNewQuote() {\n    this.setState({\n      index: Math.floor(Math.random() * lenQuotes)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"QuoteBox\" id=\"quote-box\">\n        <div id=\"text\">\n          <i className=\"fas fa-quote-left\"></i> {QUOTES[this.state.index].quote}\n        </div>\n        <div id=\"author\">-{QUOTES[this.state.index].author}</div>\n        <button\n          id=\"copy-quote\"\n          onClick={() =>\n            navigator.clipboard.writeText(\n              QUOTES[this.state.index].quote +\n                \" -\" +\n                QUOTES[this.state.index].author\n            )\n          }\n        >\n          <i className=\"far fa-clipboard\"></i>\n        </button>\n        <button className=\"btn\" id=\"new-quote\" onClick={this.getNewQuote}>\n          New Quote\n        </button>\n        <button className=\"btn\" id=\"tweet-btn\">\n          <a\n            id=\"tweet-quote\"\n            target=\"_blank\"\n            href={\n              \"https://twitter.com/intent/tweet?text=\" +\n              QUOTES[this.state.index].quote.split(\" \").join(\"%20\") +\n              \" -\" +\n              QUOTES[this.state.index].author.split(\" \").join(\"%20\") +\n              \"&hashtags=FCC\"\n            }\n          >\n            <i className=\"fab fa-twitter\"></i>\n          </a>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default QuoteBox;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteBox from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuoteBox />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}